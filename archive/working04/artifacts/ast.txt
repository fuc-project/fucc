Program(Program) {
    PreprocessorDirective(#define) {
        Identifier(BULLSHIT)
        Literal(1024)
    }
    FunctionDeclaration(fucFunction) {
        Identifier(int)
        Parameters(Parameters) {
            VariableDeclaration(x) {
                Identifier(int)
            }
        }
        Block(Block) {
            Statement(if) {
                BinaryExpression(>) {
                    Identifier(x)
                    BinaryExpression(*) {
                        Identifier(BULLSHIT)
                        Identifier(BULLSHIT)
                    }
                }
                Block(Block) {
                    ReturnStatement(return) {
                        Identifier(x)
                    }
                }
            }
            Assignment(x) {
                Identifier(*=)
                Literal(2)
            }
            FunctionCall(printf) {
                Identifier(x)
            }
            ReturnStatement(return) {
                FunctionCall(fucFunction) {
                    Identifier(x)
                }
            }
        }
    }
    FunctionDeclaration(main) {
        Identifier(int)
        Parameters(Parameters)
        Block(Block) {
            VariableDeclaration(x) {
                Identifier(int)
                Literal(2)
            }
            WhileStatement(while) {
                BinaryExpression(<=) {
                    Identifier(x)
                    Identifier(BULLSHIT)
                }
                Block(Block) {
                    Assignment(x) {
                        Identifier(*=)
                        Literal(4)
                    }
                    FunctionCall(printf) {
                        Identifier(x)
                    }
                }
            }
            FunctionCall(fucFunction) {
                Identifier(x)
            }
            FunctionCall(fucFunction) {
                Identifier(x)
            }
            ReturnStatement(return) {
                Literal(0)
            }
        }
    }
}